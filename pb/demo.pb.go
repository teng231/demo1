// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: demo.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type User_State int32

const (
	User_default_state User_State = 0
	User_deactive      User_State = 1
	User_active        User_State = 2
)

var User_State_name = map[int32]string{
	0: "default_state",
	1: "deactive",
	2: "active",
}

var User_State_value = map[string]int32{
	"default_state": 0,
	"deactive":      1,
	"active":        2,
}

func (x User_State) String() string {
	return proto.EnumName(User_State_name, int32(x))
}

func (User_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{2, 0}
}

type User_Gender int32

const (
	User_default_gender User_Gender = 0
	User_male           User_Gender = 1
	User_female         User_Gender = 2
	User_other          User_Gender = 3
)

var User_Gender_name = map[int32]string{
	0: "default_gender",
	1: "male",
	2: "female",
	3: "other",
}

var User_Gender_value = map[string]int32{
	"default_gender": 0,
	"male":           1,
	"female":         2,
	"other":          3,
}

func (x User_Gender) String() string {
	return proto.EnumName(User_Gender_name, int32(x))
}

func (User_Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{2, 1}
}

type User_Language int32

const (
	User_default_language User_Language = 0
	User_vi               User_Language = 1
	User_en               User_Language = 2
)

var User_Language_name = map[int32]string{
	0: "default_language",
	1: "vi",
	2: "en",
}

var User_Language_value = map[string]int32{
	"default_language": 0,
	"vi":               1,
	"en":               2,
}

func (x User_Language) String() string {
	return proto.EnumName(User_Language_name, int32(x))
}

func (User_Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{2, 2}
}

type UserRequest struct {
	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids      []int64  `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	NotIds   []int64  `protobuf:"varint,5,rep,packed,name=not_ids,json=notIds,proto3" json:"not_ids,omitempty"`
	Limit    int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Fullname string   `protobuf:"bytes,7,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Username string   `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Email    string   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Phone    string   `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	Phones   []string `protobuf:"bytes,11,rep,name=phones,proto3" json:"phones,omitempty"`
	State    int32    `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	App      string   `protobuf:"bytes,18,opt,name=app,proto3" json:"app,omitempty"`
	Idtoken  string   `protobuf:"bytes,19,opt,name=idtoken,proto3" json:"idtoken,omitempty"`
	Offset   int32    `protobuf:"varint,20,opt,name=offset,proto3" json:"offset,omitempty"`
	Includes []string `protobuf:"bytes,21,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{0}
}
func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *UserRequest) GetNotIds() []int64 {
	if m != nil {
		return m.NotIds
	}
	return nil
}

func (m *UserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserRequest) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *UserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserRequest) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *UserRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UserRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *UserRequest) GetIdtoken() string {
	if m != nil {
		return m.Idtoken
	}
	return ""
}

func (m *UserRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UserRequest) GetIncludes() []string {
	if m != nil {
		return m.Includes
	}
	return nil
}

type Users struct {
	Users    []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Total    int32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Filename string  `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{1}
}
func (m *Users) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Users.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return m.Size()
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Users) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Users) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type User struct {
	// `xorm:"pk autoincr notnull"`
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"pk autoincr notnull"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// `xorm:"text"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty" xorm:"text"`
	Fullname string `protobuf:"bytes,5,opt,name=fullname,proto3" json:"fullname,omitempty"`
	// `xorm:"index"`
	Phone string           `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty" xorm:"index"`
	Apps  map[string]int64 `protobuf:"bytes,7,rep,name=apps,proto3" json:"apps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// `xorm:"text"`
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty" xorm:"text"`
	// `xorm:"index"`
	Email      string        `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty" xorm:"index"`
	State      User_State    `protobuf:"varint,13,opt,name=state,proto3,enum=pb.User_State" json:"state,omitempty"`
	UpdatedAt  int64         `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Birth      int64         `protobuf:"varint,15,opt,name=birth,proto3" json:"birth,omitempty"`
	Created    int64         `protobuf:"varint,16,opt,name=created,proto3" json:"created,omitempty"`
	Gender     User_Gender   `protobuf:"varint,20,opt,name=gender,proto3,enum=pb.User_Gender" json:"gender,omitempty"`
	Language   User_Language `protobuf:"varint,21,opt,name=language,proto3,enum=pb.User_Language" json:"language,omitempty"`
	Password   string        `protobuf:"bytes,24,opt,name=password,proto3" json:"password,omitempty"`
	ValidPhone int32         `protobuf:"varint,32,opt,name=valid_phone,json=validPhone,proto3" json:"valid_phone,omitempty"`
	ValidEmail int32         `protobuf:"varint,33,opt,name=valid_email,json=validEmail,proto3" json:"valid_email,omitempty"`
	Filename   string        `protobuf:"bytes,34,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{2}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetApps() map[string]int64 {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *User) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetState() User_State {
	if m != nil {
		return m.State
	}
	return User_default_state
}

func (m *User) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *User) GetBirth() int64 {
	if m != nil {
		return m.Birth
	}
	return 0
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetGender() User_Gender {
	if m != nil {
		return m.Gender
	}
	return User_default_gender
}

func (m *User) GetLanguage() User_Language {
	if m != nil {
		return m.Language
	}
	return User_default_language
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetValidPhone() int32 {
	if m != nil {
		return m.ValidPhone
	}
	return 0
}

func (m *User) GetValidEmail() int32 {
	if m != nil {
		return m.ValidEmail
	}
	return 0
}

func (m *User) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.User_State", User_State_name, User_State_value)
	proto.RegisterEnum("pb.User_Gender", User_Gender_name, User_Gender_value)
	proto.RegisterEnum("pb.User_Language", User_Language_name, User_Language_value)
	proto.RegisterType((*UserRequest)(nil), "pb.UserRequest")
	proto.RegisterType((*Users)(nil), "pb.Users")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterMapType((map[string]int64)(nil), "pb.User.AppsEntry")
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor_ca53982754088a9d) }

var fileDescriptor_ca53982754088a9d = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xa4, 0x49, 0x9b, 0xd7, 0xad, 0xcb, 0xcc, 0x36, 0xac, 0x49, 0x94, 0x50, 0x4d,
	0xac, 0x17, 0x2a, 0x54, 0x90, 0x40, 0x48, 0x1c, 0x86, 0x98, 0x26, 0xa4, 0x1d, 0x50, 0x26, 0x0e,
	0x48, 0x48, 0x95, 0x5b, 0xbb, 0x5b, 0xb4, 0x34, 0x09, 0xb1, 0x53, 0xb4, 0x6f, 0xc1, 0xc7, 0xe2,
	0xb8, 0x23, 0x47, 0xb4, 0x7d, 0x0c, 0x2e, 0xc8, 0xcf, 0x49, 0xe8, 0xb6, 0x53, 0xfd, 0xff, 0xbf,
	0xd7, 0x17, 0xfb, 0xf7, 0x77, 0x02, 0xc0, 0xc5, 0x32, 0x1b, 0xe7, 0x45, 0xa6, 0x32, 0x62, 0xe7,
	0xb3, 0xe1, 0xb5, 0x0d, 0xbd, 0x2f, 0x52, 0x14, 0x91, 0xf8, 0x5e, 0x0a, 0xa9, 0x48, 0x1f, 0xec,
	0x98, 0x53, 0x2b, 0xb4, 0x46, 0x4e, 0x64, 0xc7, 0x9c, 0x04, 0xe0, 0xc4, 0x5c, 0x52, 0x3b, 0x74,
	0x46, 0x4e, 0xa4, 0x97, 0xe4, 0x31, 0x74, 0xd2, 0x4c, 0x4d, 0xb5, 0xeb, 0xa2, 0xeb, 0xa5, 0x99,
	0xfa, 0xc4, 0x25, 0xd9, 0x01, 0x37, 0x89, 0x97, 0xb1, 0xa2, 0xed, 0xd0, 0x1a, 0xb9, 0x91, 0x11,
	0x64, 0x1f, 0xba, 0x8b, 0x32, 0x49, 0x52, 0xb6, 0x14, 0xb4, 0x13, 0x5a, 0x23, 0x3f, 0x6a, 0xb4,
	0xae, 0x95, 0x52, 0x14, 0x58, 0xf3, 0x4c, 0xad, 0xd6, 0x7a, 0x9a, 0x58, 0xb2, 0x38, 0xa1, 0x5d,
	0x2c, 0x18, 0xa1, 0xdd, 0xfc, 0x22, 0x4b, 0x05, 0x05, 0xe3, 0xa2, 0x20, 0x7b, 0xe0, 0xe1, 0x42,
	0xd2, 0x5e, 0xe8, 0x8c, 0xfc, 0xa8, 0x52, 0xba, 0x5b, 0x2a, 0xa6, 0x04, 0xdd, 0x30, 0x3b, 0x42,
	0xa1, 0x8f, 0xc4, 0xf2, 0x9c, 0x12, 0x9c, 0xa0, 0x97, 0x84, 0x42, 0x27, 0xe6, 0x2a, 0xbb, 0x14,
	0x29, 0x7d, 0x84, 0x6e, 0x2d, 0xf5, 0xe4, 0x6c, 0xb1, 0x90, 0x42, 0xd1, 0x1d, 0x1c, 0x51, 0x29,
	0xbd, 0xf3, 0x38, 0x9d, 0x27, 0x25, 0x17, 0x92, 0xee, 0xe2, 0x33, 0x1b, 0x3d, 0xfc, 0x0a, 0xae,
	0x26, 0x2a, 0xc9, 0x00, 0x5c, 0x7d, 0x1c, 0x49, 0xad, 0xd0, 0x19, 0xf5, 0x26, 0xdd, 0x71, 0x3e,
	0x1b, 0x23, 0x6b, 0x63, 0xeb, 0xed, 0xa9, 0x4c, 0xb1, 0x84, 0x3a, 0x66, 0x7b, 0x28, 0x10, 0x58,
	0x9c, 0x08, 0x84, 0x62, 0x57, 0xc0, 0x2a, 0x3d, 0xfc, 0xeb, 0x42, 0x5b, 0x4f, 0x78, 0x10, 0xd3,
	0x3a, 0x49, 0xfb, 0x1e, 0xc9, 0x3d, 0xf0, 0xd8, 0x8a, 0x29, 0x56, 0xe0, 0x73, 0xfc, 0xa8, 0x52,
	0x77, 0x92, 0x71, 0xef, 0x25, 0xd3, 0x70, 0xf6, 0xd6, 0x39, 0x3f, 0x87, 0x36, 0xcb, 0x73, 0x49,
	0x3b, 0x78, 0x1e, 0x52, 0x9f, 0x67, 0x7c, 0x94, 0xe7, 0xf2, 0x38, 0x55, 0xc5, 0x55, 0x84, 0x75,
	0xcd, 0x93, 0x71, 0x5e, 0x08, 0x29, 0xab, 0xf4, 0x6a, 0xf9, 0x3f, 0xd5, 0x8d, 0xf5, 0x54, 0x0f,
	0xea, 0x9c, 0x36, 0x43, 0x6b, 0xd4, 0x9f, 0xf4, 0x9b, 0xc1, 0x67, 0xda, 0xad, 0x73, 0x7b, 0x02,
	0x50, 0xe6, 0x9c, 0x29, 0xc1, 0xa7, 0x4c, 0xd1, 0x3e, 0x9e, 0xdd, 0xaf, 0x9c, 0x23, 0xa5, 0x47,
	0xcf, 0xe2, 0x42, 0x5d, 0xd0, 0x2d, 0xac, 0x18, 0xa1, 0xb7, 0x32, 0x2f, 0x84, 0x6e, 0xa1, 0x01,
	0xfa, 0xb5, 0x24, 0x87, 0xe0, 0x9d, 0x8b, 0x94, 0x8b, 0x02, 0xa3, 0xed, 0x4f, 0xb6, 0x9a, 0xa7,
	0x9e, 0xa0, 0x1d, 0x55, 0x65, 0xf2, 0x02, 0xba, 0x09, 0x4b, 0xcf, 0x4b, 0x76, 0x2e, 0xe8, 0x2e,
	0xb6, 0x6e, 0x37, 0xad, 0xa7, 0x55, 0x21, 0x6a, 0x5a, 0x34, 0xd6, 0x9c, 0x49, 0xf9, 0x23, 0x2b,
	0x38, 0xa5, 0x06, 0x6b, 0xad, 0xc9, 0x53, 0xe8, 0xad, 0x58, 0x12, 0xf3, 0xa9, 0x81, 0x1b, 0x62,
	0xee, 0x80, 0xd6, 0x67, 0x24, 0xdc, 0x34, 0x18, 0x4a, 0xcf, 0xd6, 0x1a, 0x8e, 0x11, 0xd5, 0xfa,
	0xed, 0x18, 0xde, 0xbd, 0x1d, 0xfb, 0x6f, 0xc0, 0x6f, 0x92, 0xd0, 0xb7, 0xfc, 0x52, 0x5c, 0xe1,
	0x15, 0xf1, 0x23, 0xbd, 0xd4, 0x80, 0x56, 0x2c, 0x29, 0xcd, 0x05, 0x71, 0x22, 0x23, 0xde, 0xd9,
	0x6f, 0xad, 0xe1, 0x6b, 0x70, 0x91, 0x34, 0xd9, 0x86, 0x4d, 0x2e, 0x16, 0xac, 0x4c, 0xd4, 0x14,
	0x99, 0x07, 0x2d, 0xb2, 0x01, 0x5d, 0x2e, 0xd8, 0x5c, 0xc5, 0x2b, 0x11, 0x58, 0x04, 0xc0, 0xab,
	0xd6, 0xf6, 0xf0, 0x3d, 0x78, 0x86, 0x14, 0x21, 0xd0, 0xaf, 0xff, 0x66, 0x98, 0x05, 0x2d, 0xd2,
	0x85, 0xf6, 0x92, 0x25, 0xd5, 0x7f, 0x16, 0x02, 0xd7, 0x36, 0xf1, 0xc1, 0xcd, 0xd4, 0x85, 0x28,
	0x02, 0x67, 0xf8, 0x12, 0xba, 0x35, 0x3d, 0xb2, 0x03, 0x41, 0x3d, 0xa0, 0xe6, 0x18, 0xb4, 0x88,
	0x07, 0xf6, 0x2a, 0x0e, 0x2c, 0xfd, 0x2b, 0xd2, 0xc0, 0x9e, 0x7c, 0x83, 0xde, 0x47, 0xb1, 0xcc,
	0xce, 0x44, 0xb1, 0x8a, 0xe7, 0x82, 0x1c, 0x82, 0x7f, 0x1a, 0x4b, 0x65, 0xde, 0xb5, 0x26, 0xbd,
	0xea, 0x43, 0xb6, 0xef, 0xd7, 0x86, 0x24, 0x07, 0xd0, 0x39, 0x11, 0xd8, 0xf7, 0xb0, 0xad, 0x79,
	0x29, 0x3f, 0xd0, 0x5f, 0x37, 0x03, 0xeb, 0xfa, 0x66, 0x60, 0xfd, 0xb9, 0x19, 0x58, 0x3f, 0x6f,
	0x07, 0xad, 0xeb, 0xdb, 0x41, 0xeb, 0xf7, 0xed, 0xa0, 0x35, 0xf3, 0xf0, 0x73, 0xf9, 0xea, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x45, 0xe1, 0xdd, 0x3c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoServiceClient interface {
	ListUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
}

type demoServiceClient struct {
	cc *grpc.ClientConn
}

func NewDemoServiceClient(cc *grpc.ClientConn) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) ListUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/pb.DemoService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.DemoService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServiceServer is the server API for DemoService service.
type DemoServiceServer interface {
	ListUsers(context.Context, *UserRequest) (*Users, error)
	GetUser(context.Context, *UserRequest) (*User, error)
}

// UnimplementedDemoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (*UnimplementedDemoServiceServer) ListUsers(ctx context.Context, req *UserRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedDemoServiceServer) GetUser(ctx context.Context, req *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterDemoServiceServer(s *grpc.Server, srv DemoServiceServer) {
	s.RegisterService(&_DemoService_serviceDesc, srv)
}

func _DemoService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DemoService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).ListUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DemoService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DemoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _DemoService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DemoService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

func (m *UserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Includes) > 0 {
		for iNdEx := len(m.Includes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Includes[iNdEx])
			copy(dAtA[i:], m.Includes[iNdEx])
			i = encodeVarintDemo(dAtA, i, uint64(len(m.Includes[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.Offset != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Idtoken) > 0 {
		i -= len(m.Idtoken)
		copy(dAtA[i:], m.Idtoken)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Idtoken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.State != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Phones) > 0 {
		for iNdEx := len(m.Phones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Phones[iNdEx])
			copy(dAtA[i:], m.Phones[iNdEx])
			i = encodeVarintDemo(dAtA, i, uint64(len(m.Phones[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Fullname) > 0 {
		i -= len(m.Fullname)
		copy(dAtA[i:], m.Fullname)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Fullname)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotIds) > 0 {
		dAtA2 := make([]byte, len(m.NotIds)*10)
		var j1 int
		for _, num1 := range m.NotIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDemo(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintDemo(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Users) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Users) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Users) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDemo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.ValidEmail != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.ValidEmail))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.ValidPhone != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.ValidPhone))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Language != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Gender != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Created != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Birth != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Birth))
		i--
		dAtA[i] = 0x78
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.State != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Apps) > 0 {
		for k := range m.Apps {
			v := m.Apps[k]
			baseI := i
			i = encodeVarintDemo(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDemo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDemo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Fullname) > 0 {
		i -= len(m.Fullname)
		copy(dAtA[i:], m.Fullname)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Fullname)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDemo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDemo(dAtA []byte, offset int, v uint64) int {
	offset -= sovDemo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDemo(uint64(m.Id))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovDemo(uint64(e))
		}
		n += 1 + sovDemo(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovDemo(uint64(m.Limit))
	}
	if len(m.NotIds) > 0 {
		l = 0
		for _, e := range m.NotIds {
			l += sovDemo(uint64(e))
		}
		n += 1 + sovDemo(uint64(l)) + l
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Fullname)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	if len(m.Phones) > 0 {
		for _, s := range m.Phones {
			l = len(s)
			n += 1 + l + sovDemo(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovDemo(uint64(m.State))
	}
	l = len(m.App)
	if l > 0 {
		n += 2 + l + sovDemo(uint64(l))
	}
	l = len(m.Idtoken)
	if l > 0 {
		n += 2 + l + sovDemo(uint64(l))
	}
	if m.Offset != 0 {
		n += 2 + sovDemo(uint64(m.Offset))
	}
	if len(m.Includes) > 0 {
		for _, s := range m.Includes {
			l = len(s)
			n += 2 + l + sovDemo(uint64(l))
		}
	}
	return n
}

func (m *Users) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovDemo(uint64(l))
		}
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovDemo(uint64(m.Total))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDemo(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Fullname)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	if len(m.Apps) > 0 {
		for k, v := range m.Apps {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDemo(uint64(len(k))) + 1 + sovDemo(uint64(v))
			n += mapEntrySize + 1 + sovDemo(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovDemo(uint64(m.State))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovDemo(uint64(m.UpdatedAt))
	}
	if m.Birth != 0 {
		n += 1 + sovDemo(uint64(m.Birth))
	}
	if m.Created != 0 {
		n += 2 + sovDemo(uint64(m.Created))
	}
	if m.Gender != 0 {
		n += 2 + sovDemo(uint64(m.Gender))
	}
	if m.Language != 0 {
		n += 2 + sovDemo(uint64(m.Language))
	}
	l = len(m.Password)
	if l > 0 {
		n += 2 + l + sovDemo(uint64(l))
	}
	if m.ValidPhone != 0 {
		n += 2 + sovDemo(uint64(m.ValidPhone))
	}
	if m.ValidEmail != 0 {
		n += 2 + sovDemo(uint64(m.ValidEmail))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 2 + l + sovDemo(uint64(l))
	}
	return n
}

func sovDemo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDemo(x uint64) (n int) {
	return sovDemo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDemo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDemo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDemo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIds = append(m.NotIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDemo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDemo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIds) == 0 {
					m.NotIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDemo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIds = append(m.NotIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idtoken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idtoken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Includes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Includes = append(m.Includes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Users) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Users: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Users: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDemo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDemo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDemo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDemo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDemo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDemo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Apps[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= User_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birth", wireType)
			}
			m.Birth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= User_Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= User_Language(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidPhone", wireType)
			}
			m.ValidPhone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidPhone |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidEmail", wireType)
			}
			m.ValidEmail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidEmail |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDemo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDemo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDemo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDemo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDemo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDemo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDemo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDemo = fmt.Errorf("proto: unexpected end of group")
)
